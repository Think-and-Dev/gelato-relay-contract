{
  "address": "0x8c1901c031Cdf42a846c0C422A3B5A2c943F4944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        }
      ],
      "name": "IncrementContextCounter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contextCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementContext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd85596cf6cd72ab12a8a832c303a871b044db23a552c64a8039e0886306ada79",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0x8c1901c031Cdf42a846c0C422A3B5A2c943F4944",
    "transactionIndex": 47,
    "gasUsed": "186343",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfb205c9c07894b96af8d81a8d1d79ea18183b46f457aa0e2ecaf33e00f54b79c",
    "transactionHash": "0xd85596cf6cd72ab12a8a832c303a871b044db23a552c64a8039e0886306ada79",
    "logs": [],
    "blockNumber": 8346162,
    "cumulativeGasUsed": "21638537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d"
  ],
  "numDeployments": 1,
  "solcInputHash": "898ceb85d6a2e568fe487fd27e98f56c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"IncrementContextCounter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contextCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementContext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CounterERC2771.sol\":\"CounterERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CounterERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {\\n    ERC2771Context\\n} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\n// Inheriting ERC2771Context gives access to:\\n// 1. isTrustedForwarder(), returns true if the address is the trustedForwarder\\n// 2. _msgSender() - function to retrieve original off-chain sender by\\n// taking last 20 bytes of calldata.\\ncontract CounterERC2771 is ERC2771Context {\\n    // A mapping of a counter to each _msgSender()\\n    mapping(address => uint256) public contextCounter;\\n\\n    event IncrementContextCounter(address _msgSender);\\n\\n    // a modifier which utilises `isTrustedForwarder` for security.\\n    modifier onlyTrustedForwarder() {\\n        require(\\n            isTrustedForwarder(msg.sender),\\n            \\\"Only callable by Trusted Forwarder\\\"\\n        );\\n        _;\\n    }\\n\\n    // Setting the trustedForwarder upon contract deployment\\n    //solhint-disable-next-line no-empty-blocks\\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\\n\\n    // `incrementContext` is the target function to call\\n    // this function increments the counter mapped to the _msgSender\\n    function incrementContext() external onlyTrustedForwarder {\\n        address _msgSender = _msgSender();\\n\\n        contextCounter[_msgSender]++;\\n\\n        // Emitting an event for testing purposes\\n        emit IncrementContextCounter(_msgSender);\\n    }\\n}\\n\",\"keccak256\":\"0x25cd1b955386a2971daa0f37562a704f4dd4bb781a387287eef02cd25d6bc233\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516102ea3803806102ea83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161026061008a600039600060a801526102606000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063572b6c051461004657806382b761681461006e578063f69c0ac11461009c575b600080fd5b6100596100543660046101d3565b6100a6565b60405190151581526020015b60405180910390f35b61008e61007c3660046101d3565b60006020819052908152604090205481565b604051908152602001610065565b6100a46100d8565b005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6100e1336100a6565b61013c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c61626c65206279205472757374656420466f727761726460448201526132b960f11b606482015260840160405180910390fd5b60006101466101b1565b6001600160a01b038116600090815260208190526040812080549293509061016d83610203565b90915550506040516001600160a01b03821681527fea2bfe80062c6394f8f8d5804cafdf4b2ff1c2b5feefccbb11233dc843632d0a9060200160405180910390a150565b60006101bc336100a6565b156101ce575060131936013560601c90565b503390565b6000602082840312156101e557600080fd5b81356001600160a01b03811681146101fc57600080fd5b9392505050565b60006001820161022357634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122023fd01a9a082a157daf76fa5a6ca4949125b471c50431d20cc61880c00ac015d64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063572b6c051461004657806382b761681461006e578063f69c0ac11461009c575b600080fd5b6100596100543660046101d3565b6100a6565b60405190151581526020015b60405180910390f35b61008e61007c3660046101d3565b60006020819052908152604090205481565b604051908152602001610065565b6100a46100d8565b005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6100e1336100a6565b61013c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c61626c65206279205472757374656420466f727761726460448201526132b960f11b606482015260840160405180910390fd5b60006101466101b1565b6001600160a01b038116600090815260208190526040812080549293509061016d83610203565b90915550506040516001600160a01b03821681527fea2bfe80062c6394f8f8d5804cafdf4b2ff1c2b5feefccbb11233dc843632d0a9060200160405180910390a150565b60006101bc336100a6565b156101ce575060131936013560601c90565b503390565b6000602082840312156101e557600080fd5b81356001600160a01b03811681146101fc57600080fd5b9392505050565b60006001820161022357634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122023fd01a9a082a157daf76fa5a6ca4949125b471c50431d20cc61880c00ac015d64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1751,
        "contract": "contracts/CounterERC2771.sol:CounterERC2771",
        "label": "contextCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}